#!/bin/sh

[ $(id -u) -eq 0 ] || (echo 'Must be run as root!' >&2; false) || exit 1

usage() {
	cat >&2 <<-EOF
		Usage: $0 OPTIONS PODFILE PODNAME
		OPTIONS:
		  -c ROOTCONFFILE   Set pod root configuration
		  -h HOSTNAME       Set pod hostname
		  -v                Verbose
	EOF
	exit 1
}

# Args: POD_JSON
validatePodJSON() {
	POD_JSON="$1"
	assertJSON "$POD_JSON" 1 'keys[]?' 'environment|volumes|services' &&
	assertJSON "$POD_JSON" 1 '.services[]? | keys? | .[]' 'image|environment|exec|volumes|http|checks' &&
	assertJSON "$POD_JSON" 1 '.services | length' '[1-9][0-9]*' &&
	assertJSON "$POD_JSON" 1 '.services | keys? | .[]' '[a-zA-Z0-9_-]+' &&
	assertJSON "$POD_JSON" 0 '.services[]?.environment,.environment | keys? | .[]' '[a-zA-Z0-9_]+' &&
	assertJSON "$POD_JSON" 1 '.services[]?.image | type' 'string' &&
	assertJSON "$POD_JSON" 1 '.services[]?.image' '.+/.+' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | keys? | .[]' 'port|protect|subdomain' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .port' '[0-9]+' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .protect | type' 'boolean|null' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .protect' 'true|false|null' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .subdomain | type' 'string|null' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .subdomain' '[a-zA-Z0-9_-]*' || return 1

	# Restrict volumes to pod directory
	jq -n "$POD_JSON | .volumes | keys? | .[]" | while read VOLUME_NAME_JSON; do
		(! jq -nr "$VOLUME_NAME_JSON" | grep -Eq '[^a-z0-9\-]' || (echo "Invalid volume name: $VOLUME_NAME. Only lower case alphanumeric chars and '-' supported." >&2; false)) &&
		VOLUME_JSON="$(jq -n "$POD_JSON | .volumes.$VOLUME_NAME_JSON")" &&
		VOLUME_DIRECTORY="$(jq -nr "$VOLUME_JSON | .source")" &&
		VOLUME_DIRECTORY="$(cd "$POD_DIRECTORY" && readlink -m "$VOLUME_DIRECTORY")" &&
		BASEDIR_LENGTH="$(expr length "$POD_DIRECTORY/")" &&
		([ "$(echo "$VOLUME_DIRECTORY" | grep -Eo "^.{$BASEDIR_LENGTH}")" = "$POD_DIRECTORY/" ] \
			|| (echo "Volume outside base directory: $VOLUME_DIRECTORY" >&2; false)) || return 1
	done
	# TODO: Assert there is no duplicate port binding 1) within a pod and 2) within all pods in the root directory
}

# Args: POD_JSON MANDATORY SELECTOR VALUEVALIDATIONREGEX
assertJSON() {
	JSON_SELECTION="$(echo "$1" | jq -r "$3")" &&
	([ $? -eq 0 ] || (echo "Invalid or missing path: $3" >&2; false)) || return 1
	if [ "$JSON_SELECTION" ]; then
		(echo "$JSON_SELECTION" | grep -Eqx "$4" || (echo "Invalid JSON value at $3 ($4): $(echo "$JSON_SELECTION" | grep -Evx "$4")" >&2; false))
	elif [ "$2" -eq 1 ]; then
		echo "Missing path: $3" >&2
		return 1
	fi
}

generateEffectiveJSON() {
	# TODO: make cat-manifest call safe
	FETCHED_IMAGE_MANIFESTS='{}'
	for IMAGE_REF in $(jq -nr "$1 | .services[]?.image"); do
		IMAGE_FETCH_OPTIONS=
		! echo "$IMAGE_REF" | grep -Eq '^docker://' || IMAGE_FETCH_OPTIONS='--insecure-options=image'
		FETCHED_IMAGE_ID="$(rkt fetch $IMAGE_FETCH_OPTIONS "$IMAGE_REF")" || (echo "Cannot fetch image: $IMAGE_REF" >&2; false) || return 1
		FETCHED_IMAGE_MANIFEST="$(rkt image cat-manifest "$FETCHED_IMAGE_ID")" &&
		FETCHED_IMAGE_MANIFESTS="$(jq -n "$FETCHED_IMAGE_MANIFESTS + {\"$IMAGE_REF\": $FETCHED_IMAGE_MANIFEST}")" || return 1
	done
	jq --arg pod_name "$POD_NAME" --arg pod_dir "$POD_DIRECTORY" '
		def isfilevol(v): v | startswith("../") or startswith("./") or startswith("/");
		def tovolname(p): "volume-" + (p |
			ascii_downcase? | explode? |
			map(if ((. > 47 and . < 58) or (. > 96 and . < 123)) then . else 45 end) |
			reduce .[] as $char (
				{"result":[],"last":0};
				if ($char == 45 and .last == 45)
				then .
				else {"result": (.result + [$char]), "last": $char}
				end
			) | .result | implode | ltrimstr("-") | rtrimstr("-")
		);
		.effective += {"net": "default", "dns": ["host"], "inject-hosts": true} |
		.effective += (.default | with_entries(select(.key == ["net", "dns", "dns-search", "inject-hosts"][]))) |
		.effective += .pod |
		.effective.volumes = (reduce .images[]?.app?.mountPoints[]? as $item ({}; . + {($item.name): {"source": ("./volumes/" + $item.name), "kind": "host", "readonly": false}})) |
		.effective.volumes += .default.volumes |
		.effective.volumes += (reduce (.effective.services[]?.volumes? | to_entries? | .[]? | select(isfilevol(.value))) as $e ({}; . + {(tovolname($e.key)): {"source": $e.value, "kind": "host", "readonly": true}})) |
		.effective.volumes += .pod.volumes |
		.effective.volumes[]?.source |= (if (startswith("/")) then . else ($pod_dir + "/" + .) end) |
		.effective.volumes[]?.kind |= (if (. == null) then "host" else . end) |
		.effective.volumes[]?.readonly |= (if (. == null) then false else . end) |
		(.effective.services[]?.volumes? | select(. != null)) |= with_entries(.value = if (isfilevol(.value)) then tovolname(.key) else .value end)
	' <<-EOF
		{"pod": $1, "default": $2, "images": $FETCHED_IMAGE_MANIFESTS}
	EOF
	[ $? -eq 0 ] || (echo 'Effective JSON transformation failed!' >&2; false)
	#.effective."on-prepared" = (if (.default.pods[$pod_name]?."on-prepared" != null) then .default.pods[$pod_name]?."on-prepared" else (if (.default."on-prepared" != null) then .default."on-prepared" else "/bin/true" end) end) |
	#.effective."on-started" = (if (.default.pods[$pod_name]?."on-started" != null) then .default.pods[$pod_name]?."on-started" else (if (.default."on-started" != null) then .default."on-started" else "/bin/true" end) end) |
}

# TODO: restrict by ports defined for pod in defaults if defaults defined
generateRktPrepareArgs() {
	echo "$EFFECTIVE_JSON" | jq -r '
		[.images[].app?.ports[]?] as $availPorts |
		[
			([if (.effective.services[]?.image | startswith("docker://")) then "--insecure-options=image" else empty end][0] | select(. != null)),
			(.effective.volumes? | to_entries? | .[]? | ("--volume=" + .key + ",source=" + .value.source + ",kind=" + .value.kind + ",readOnly=" + (.value.readonly == true | tostring))),
			(.effective.environment? | to_entries? | .[]? | ("--set-env=" + .key + "=" + .value)),
			(.effective.services[]?.ports[]? | ("--port=" + .name + (if (.ip) then (":" + .ip) else "" end) + ":" + (.port | tostring))),
			(.effective.services? | to_entries? | .[]? | (
				(.value.image),
				("--name=" + .key),
				(.value.environment? | to_entries? | .[]? | ("--environment=" + .key + "=" + .value)),
				(.value.volumes? | to_entries? | .[]? | ("--mount=volume=" + .value + ",target=" + .key)),
				(if ((.value.exec | length) > 0) then (("--exec=" + .value.exec[0]), "--", (.value.exec[1:][])) else "--" end),
				"---"
			))
		] | join("\u0000")' | head -z -n -1
}

# TODO: secure volume base dir
generateRktRunArgs() {
	echo "$POD_JSON" | jq -r --arg pod_name "$POD_NAME" '(
		("--hostname=" + (if (.hostname == null) then $pod_name else .hostname end)),
		("--net=" + .net),
		(.dns[]? | ("--dns=" + .)),
		(."dns-search"[]? | ("--dns-search=" + (. | split("${pod_name}") | join($pod_name)))),
		(if (."inject-hosts" == true) then (.services | keys? | .[]? | ("--hosts-entry=127.0.0.1=" + .)) else empty end)
	)' | xargs
}

runInfrastructureScript() {
	SCRIPT_TYPE="$1"
	export POD_NAME
	export EFFECTIVE_JSON
	export POD_IP
	(POD_NAME_JSON="$(echo "$POD_NAME" | jq -R .)"
	cd "$POD_DIRECTORY" &&
	# TODO: remove or make call whitespace safe
	EXEC_SCRIPT="$(jq -nre "$DEFAULTS_JSON | if (.pods."$POD_NAME" | has(\"$SCRIPT_TYPE\")) then .pods.$POD_NAME_JSON.\"$SCRIPT_TYPE\"[]? else if (.\"$SCRIPT_TYPE\") then .\"$SCRIPT_TYPE\"[]? else \"/bin/true\" end end" | xargs)" &&
	(sh -c "$EXEC_SCRIPT" || (echo "Error in $SCRIPT_TYPE script: $EXEC_SCRIPT" >&2; false))) || return 1
}

podip() {
	for SEC in 1 1 3 5; do
		POD_STATUS="$(rkt status "$POD_UUID")" || return 1
		if echo "$POD_STATUS" | grep -Eq '^state=running'; then
			# Print IP
			echo "$POD_STATUS" | grep -Eo '^networks=[^:]+:[^=]+=[0-9a-z\.:]+' | grep -Eo '[0-9a-z\.:]+$' \
				|| (echo "Cannot find IP for pod $POD_NAME" >&2; false) || return 1
			return 0
		elif echo "$POD_STATUS" | grep -Eq '^state=exited'; then
			echo 'Pod exited' >&2
			return 1
		fi
		sleep $SEC
	done
	echo "Timed out while waiting for pod $POD_NAME" >&2
	return 1
}

reload() {
	trap : 1
	kill -1 "$POD_PID"
	trap reload 1
}

terminateGracefully() {
	trap : 2 3 9 15
	kill -15 "$POD_PID" 2>/dev/null
	for SEC in 1 1 3 3 5 10; do
		ps "$POD_PID" >/dev/null || exit "${1:-0}"
		sleep $SEC
	done
	echo "Killing pod since it did not respond: $POD_NAME" >&2
	kill -9 "$POD_PID"
	exit 1
}



DEFAULTS_FILE=
POD_FILE=
POD_NAME=
VERBOSE=
while [ $# -gt 0 ]; do
	case "$1" in
		-c)
			shift
			DEFAULTS_FILE="$1"
			[ "$1" ] || usage
		;;
		-v)
			VERBOSE=true
		;;
		*)
			break;
		;;
	esac
	shift
done
POD_FILE="$1"
POD_NAME="$2"
shift
shift
[ ! -z "$POD_FILE" -a ! -z "$POD_NAME" -a $# -eq 0 ] || usage

DEFAULTS_JSON="$([ ! -f "$DEFAULTS_FILE" ] || cat "$DEFAULTS_FILE")" &&
DEFAULTS_JSON="${DEFAULTS_JSON:-\{\}}" &&
POD_DIRECTORY="$(readlink -m "$(dirname "$POD_FILE")")" &&
POD_UUID_FILE="/var/run/pod-${POD_NAME}.uuid" && # todo
POD_JSON="$(cat "$POD_FILE")" &&
POD_USER="$(stat -c '%U' "$POD_FILE")" &&
POD_GROUP="$(stat -c '%U' "$POD_FILE")" &&
validatePodJSON "$POD_JSON" &&
EFFECTIVE_JSON="$(generateEffectiveJSON "$POD_JSON" "$DEFAULTS_JSON")" &&
POD_JSON="$(jq -n "$EFFECTIVE_JSON | .effective")" &&
RKT_RUN_ARGS="$(generateRktRunArgs)" || exit 1

if [ "$VERBOSE" ]; then
	echo 'Effective configuration:'
	jq -n "$EFFECTIVE_JSON | .effective"
	printf 'Will now run rkt commands:\n%s\n' '  rkt prepare --quiet=true'
	generateRktPrepareArgs | xargs -0 -n1 | sed -E 's/^/    /g'
	echo "  rkt run-prepared $RKT_RUN_ARGS CONTAINER_UUID"
fi

POD_IP=
runInfrastructureScript on-prepared || exit 1

echo "$EFFECTIVE_JSON" | jq -r '[(.effective.volumes[]? | select(.kind == "host" and .readonly == false) | .source), ""] | join("\u0000")' | head -z -n -1 | xargs -0 -n1 mkdir -p 2>/dev/null
POD_UUID="$(generateRktPrepareArgs | xargs -0 rkt prepare --quiet=true)" &&
([ ! -f "$POD_UUID_FILE" ] || /usr/bin/rkt rm --uuid-file="$POD_UUID_FILE" >/dev/null 2>/dev/null || true) && # Clean up old container
echo "$POD_UUID" > "$POD_UUID_FILE" || exit 1
rkt run-prepared $RKT_RUN_ARGS "$POD_UUID" &
POD_PID=$!
trap terminateGracefully 2 3 9 15
trap reload 1
POD_IP="$(podip)" &&
runInfrastructureScript on-started || terminateGracefully 1
unset EFFECTIVE_JSON
unset DEFAULTS_JSON
unset POD_JSON
wait
