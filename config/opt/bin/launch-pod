#!/bin/sh

[ $(id -u) -eq 0 ] || (echo 'Must be run as root!' >&2; false) || exit 1

usage() {
	cat >&2 <<-EOF
		Usage: $0 OPTIONS PODFILE PODNAME
		OPTIONS:
		  -c ROOTCONFFILE   Set pod root configuration
		  -h HOSTNAME       Set pod hostname
		  -v                Verbose
	EOF
	exit 1
}

# Args: POD_JSON
validatePodJSON() {
	POD_JSON="$1"
	assertJSON "$POD_JSON" 1 'keys[]?' 'environment|volumes|services' &&
	assertJSON "$POD_JSON" 1 '.services[]? | keys? | .[]' 'image|environment|exec|volumes|http|checks' &&
	assertJSON "$POD_JSON" 1 '.services | length' '[1-9][0-9]*' &&
	assertJSON "$POD_JSON" 1 '.services | keys? | .[]' '[a-zA-Z0-9_-]+' &&
	assertJSON "$POD_JSON" 0 '.services[]?.environment,.environment | keys? | .[]' '[a-zA-Z0-9_]+' &&
	assertJSON "$POD_JSON" 1 '.services[]?.image | type' 'string' &&
	#assertJSON "$POD_JSON" 1 '.services[]?.image' '.+/.+' &&
	assertJSON "$POD_JSON" 0 '.services[]?.healthcheck | select(. != null) | type' 'object' &&
	assertJSON "$POD_JSON" 0 '.services[]?.healthcheck?.timeout' 'null|[0-9\.]+[dhms]?' &&
	assertJSON "$POD_JSON" 0 '.services[]?.healthcheck?.interval' 'null|([0-9\.]+[dhms]? ?)' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | keys? | .[]' 'port|protect|subdomain' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .port' '[0-9]+' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .protect | type' 'boolean|null' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .protect' 'true|false|null' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .subdomain | type' 'string|null' &&
	assertJSON "$POD_JSON" 0 '.services[]?.http | select(. != null) | .subdomain' '[a-zA-Z0-9_-]*' || return 1

	# Restrict volumes to pod directory
	jq -n "$POD_JSON | .volumes | keys? | .[]" | while read VOLUME_NAME_JSON; do
		(! jq -nr "$VOLUME_NAME_JSON" | grep -Eq '[^a-z0-9\-]' || (echo "Invalid volume name: $VOLUME_NAME. Only lower case alphanumeric chars and '-' supported." >&2; false)) &&
		VOLUME_JSON="$(jq -n "$POD_JSON | .volumes.$VOLUME_NAME_JSON")" &&
		VOLUME_DIRECTORY="$(jq -nr "$VOLUME_JSON | .source")" &&
		VOLUME_DIRECTORY="$(cd "$POD_DIRECTORY" && readlink -m "$VOLUME_DIRECTORY")" &&
		BASEDIR_LENGTH="$(expr length "$POD_DIRECTORY/")" &&
		([ "$(echo "$VOLUME_DIRECTORY" | grep -Eo "^.{$BASEDIR_LENGTH}")" = "$POD_DIRECTORY/" ] \
			|| (echo "Volume outside base directory: $VOLUME_DIRECTORY" >&2; false)) || return 1
	done
	# TODO: Assert there is no duplicate port binding 1) within a pod and 2) within all pods in the root directory
}

# Args: POD_JSON MANDATORY SELECTOR VALUEVALIDATIONREGEX
assertJSON() {
	JSON_SELECTION="$(echo "$1" | jq -r "$3")" &&
	([ $? -eq 0 ] || (echo "Invalid or missing path: $3" >&2; false)) || return 1
	if [ "$JSON_SELECTION" ]; then
		(echo "$JSON_SELECTION" | grep -Eqx "$4" || (echo "Invalid JSON value at $3 ($4): $(echo "$JSON_SELECTION" | grep -Evx "$4")" >&2; false))
	elif [ "$2" -eq 1 ]; then
		echo "Missing path: $3" >&2
		return 1
	fi
}

JQ_FILE_PATH_FUNCTIONS='
	def tosimplename(f): (f |
		ascii_downcase? | explode? |
		map(if ((. > 47 and . < 58) or (. > 96 and . < 123)) then . else 45 end) |
		reduce .[] as $char (
			{"result":[],"last":45};
			if ($char == 45 and .last == 45)
			then .
			else {"result": (.result + [$char]), "last": $char}
			end
		) | .result | implode | ltrimstr("-") | rtrimstr("-")
	);
	def isfile(v): v? | startswith("../") or startswith("./") or startswith("/") or (. == ".");
	def tovolname(f): "volume-" + tosimplename(f);
	def toimagename(i): i | if (isfile(.)) then ("local/" + $pod_name + (tosimplename(.) | if (. == "") then "" else ("-" + .) end) + ":latest") else . end;
'

# Args: PODJSON PODDIRECTORY
buildDockerImages() {
	for IMAGE2BUILD in $(echo "$1" | jq -r --arg pod_name "$POD_NAME" "$JQ_FILE_PATH_FUNCTIONS"' .services[] | select(isfile(.image)) | .image | (toimagename(.) + "=" + .)'); do
		echo "Building docker image $IMAGE2BUILD ..." >&2
		BUILD_IMG_NAME="$(echo "$IMAGE2BUILD" | cut -d '=' -f 1)"
		BUILD_DIR="$(echo "$IMAGE2BUILD" | sed -E 's/^.*?=//')"
		echo "$BUILD_DIR" | grep -Eq '^/' || BUILD_DIR="$2/$BUILD_DIR"
		IMAGE_FILE_NAME="$(echo "$BUILD_IMG_NAME" | sed -E 's/[^a-z0-9\-]+/-/g')"
		DOCKER_IMAGE_FILE="${IMAGE_FILE_NAME}.tar"
		ACI_FILE="$BUILD_DIR/${IMAGE_FILE_NAME}.aci"
		(
			cd "$BUILD_DIR" &&
			docker build -t "$BUILD_IMG_NAME" --rm . &&
			docker save "$BUILD_IMG_NAME" > "$DOCKER_IMAGE_FILE" &&
			docker2aci "$DOCKER_IMAGE_FILE" &&
			TMP_CONTAINER_UUID="$(rkt prepare --quiet=true --insecure-options=image "$ACI_FILE")" #&&
			rkt rm "$TMP_CONTAINER_UUID" # Prepare container to import image. TODO: simply import image when supported by rkt
			STATUS=$?
			#docker rmi -f "$BUILD_IMG_NAME"
			rm -f "$DOCKER_IMAGE_FILE" "$ACI_FILE"
			exit $STATUS
		)
	done
}

generateEffectiveJSON() {
	# TODO: make cat-manifest call safe
	FETCHED_IMAGE_MANIFESTS='{}'
	for IMAGE_REF in $(echo "$1" | jq -r --arg pod_name "$POD_NAME" "$JQ_FILE_PATH_FUNCTIONS"' .services[] | toimagename(.image)'); do
		IMAGE_FETCH_OPTIONS=
		! echo "$IMAGE_REF" | grep -Eq '^(docker://|local/)' || IMAGE_FETCH_OPTIONS='--insecure-options=image'
		FETCHED_IMAGE_ID="$(rkt fetch $IMAGE_FETCH_OPTIONS "$IMAGE_REF")" || (echo "Cannot fetch image: $IMAGE_REF" >&2; false) || return 1
		FETCHED_IMAGE_MANIFEST="$(rkt image cat-manifest "$FETCHED_IMAGE_ID")" &&
		FETCHED_IMAGE_MANIFESTS="$(jq -n "$FETCHED_IMAGE_MANIFESTS + {\"$IMAGE_REF\": $FETCHED_IMAGE_MANIFEST}")" || return 1
	done
	jq --arg pod_name "$POD_NAME" --arg pod_dir "$POD_DIRECTORY" "
		$JQ_FILE_PATH_FUNCTIONS"'
		.effective += {"net": "default", "dns": ["host"], "inject-hosts": true} |
		.effective += (.default | with_entries(select(.key == ["net", "dns", "dns-search", "inject-hosts"][]))) |
		.effective += .pod |
		.effective.volumes = (reduce .images[]?.app?.mountPoints[]? as $item ({}; . + {($item.name): {"source": ("./volumes/" + $item.name), "kind": "host", "readonly": false}})) |
		.effective.volumes += .default.volumes |
		.effective.volumes += (reduce (.effective.services[]?.volumes? | to_entries? | .[]? | select(isfile(.value))) as $e ({}; . + {(tovolname($e.key)): {"source": $e.value, "kind": "host", "readonly": true}})) |
		.effective.volumes += .pod.volumes |
		.effective.volumes[]?.source |= (if (startswith("/")) then . else ($pod_dir + "/" + .) end) |
		.effective.volumes[]?.kind |= (if (. == null) then "host" else . end) |
		.effective.volumes[]?.readonly |= (if (. == null) then false else . end) |
		(.effective.services[]?.volumes? | select(. != null)) |= with_entries(.value = if (isfile(.value)) then tovolname(.key) else .value end) |
		(.effective.services[]?.healthcheck | select(. != null) | .timeout) |= (if (. == null) then "20s" else . end) |
		(.effective.services[]?.healthcheck | select(. != null) | .interval) |= (if (. == null) then "30s" else . end)
	' <<-EOF
		{"pod": $1, "default": $2, "images": $FETCHED_IMAGE_MANIFESTS}
	EOF
	[ $? -eq 0 ] || (echo 'Effective JSON transformation failed!' >&2; false)
	#.effective."on-prepared" = (if (.default.pods[$pod_name]?."on-prepared" != null) then .default.pods[$pod_name]?."on-prepared" else (if (.default."on-prepared" != null) then .default."on-prepared" else "/bin/true" end) end) |
	#.effective."on-started" = (if (.default.pods[$pod_name]?."on-started" != null) then .default.pods[$pod_name]?."on-started" else (if (.default."on-started" != null) then .default."on-started" else "/bin/true" end) end) |
}

# TODO: restrict by ports defined for pod in defaults if defaults defined
generateRktPrepareArgs() {
	echo "$EFFECTIVE_JSON" | jq -r --arg pod_name "$POD_NAME" "
		$JQ_FILE_PATH_FUNCTIONS"'
		[.images[].app?.ports[]?] as $availPorts |
		[
			([if (.effective.services[]?.image | startswith("docker://")) then "--insecure-options=image" else empty end][0] | select(. != null)),
			(.effective.volumes? | to_entries? | .[]? | ("--volume=" + .key + ",source=" + .value.source + ",kind=" + .value.kind + ",readOnly=" + (.value.readonly == true | tostring))),
			(.effective.environment? | to_entries? | .[]? | ("--set-env=" + .key + "=" + .value)),
			(.effective.services[]?.ports[]? | ("--port=" + .name + (if (.ip) then (":" + .ip) else "" end) + ":" + (.port | tostring))),
			(.effective.services? | to_entries? | .[]? | (
				toimagename(.value.image),
				("--name=" + .key),
				(.value.environment? | to_entries? | .[]? | ("--environment=" + .key + "=" + .value)),
				(.value.volumes? | to_entries? | .[]? | ("--mount=volume=" + .value + ",target=" + .key)),
				(if ((.value.exec | length) > 0)
					then (("--exec=" + .value.exec[0]), "--", (.value.exec[1:][]))
					else "--" end),
				"---"
			))
		] | join("\u0000")' | head -z -n -1
}

# TODO: secure volume base dir
generateRktRunArgs() {
	echo "$POD_JSON" | jq -r --arg pod_name "$POD_NAME" '(
		("--hostname=" + (if (.hostname == null) then $pod_name else .hostname end)),
		("--net=" + .net),
		(.dns[]? | ("--dns=" + .)),
		(."dns-search"[]? | ("--dns-search=" + (. | split("${pod_name}") | join($pod_name)))),
		(if (."inject-hosts" == true) then (.services | keys? | .[]? | ("--hosts-entry=127.0.0.1=" + .)) else empty end)
	)' | xargs
}

initHealthChecks() {
	jq -nre "$DEFAULTS_JSON | if (.pods.$POD_NAME_JSON | has(\"on-checked\")) then .pods.$POD_NAME_JSON else .\"on-checked\" end | select(. != null)" >/dev/null || return 0
	CHECKS_JSON="$(echo "$POD_JSON" | jq -c '[.services? | to_entries? | .[] | select(.value.healthcheck != null) | {"app": .key, "cmd": .value.healthcheck.cmd, "timeout": .value.healthcheck.timeout, "interval": .value.healthcheck.interval}]')" &&
	CHECK_COUNT="$(jq -n "$CHECKS_JSON | length")" || return 1
	CHECK_INDEX=0
	while [ $CHECK_INDEX -lt $CHECK_COUNT ]; do
		CHECK_JSON=$CHECK_INDEX
		CHECK_JSON="$(jq -ne "$CHECKS_JSON | .[$CHECK_INDEX]")" &&
		CHECK_APP="$(jq -nre "$CHECK_JSON | .app")" &&
		CHECK_TIMEOUT="$(jq -nre "$CHECK_JSON | .timeout")" &&
		CHECK_INTERVAL="$(jq -nre "$CHECK_JSON | .interval")" \
			|| (echo "Invalid/incomplete checkscript: $CHECK_JSON" >&2; false) || return 1
		runHealthCheck "$CHECK_APP" "$CHECK_JSON" "$CHECK_TIMEOUT" || return 1
		if [ $? -eq 0 ]; then
			while true; do
				sleep $CHECK_INTERVAL || exit 1
				runHealthCheck "$CHECK_APP" "$CHECK_JSON" "$CHECK_TIMEOUT"
			done &
			CHECK_PIDS="$! $CHECK_PIDS"
		else
			echo "Health check handling for $CHECK_APP failed: $CHECK_JSON" >&2
		fi
		CHECK_INDEX="$(expr $CHECK_INDEX + 1)"
	done
}

# Args: APP CHECKJSON TIMEOUT
runHealthCheck() {
	CHECK_APP="$1"
	CHECK_JSON="$2"
	CHECK_TIMEOUT="$3"
	CHECK_CMD_JSON="$(jq -n "$CHECK_JSON | (.cmd + [\"#\"]) | join(\"\\u0000\")")"
	CHECK_OUTPUT="$(jq -nr "$CHECK_CMD_JSON" | head -z -n -1 | xargs -0 timeout -s KILL "$CHECK_TIMEOUT" rkt enter --app="$CHECK_APP" "$POD_UUID" 2>&1)"
	CHECK_STATUS=$?
	case $CHECK_STATUS in
		0)
			CHECK_STATUS=passing
		;;
		1)
			CHECK_STATUS=warning
		;;
		*)
			CHECK_STATUS=critical
		;;
	esac
	! [ $CHECK_STATUS = critical -a -z "$CHECK_OUTPUT" ] || CHECK_OUTPUT="Check exited with status code $CHECK_STATUS"
	runInfrastructureScript on-checked "$CHECK_APP" "$CHECK_STATUS" "$CHECK_OUTPUT"
}

# Args: SCRIPTTYPE [ARG1, [ARG2, ...]]
runInfrastructureScript() {
	SCRIPT_TYPE="$1"
	shift
	ARGS_JSON='[]'
	while [ $# -gt 0 ]; do
		ARGS_JSON="$(echo -n "$1" | jq -sR "$ARGS_JSON + [.]")"
		shift
	done
	export POD_NAME
	export EFFECTIVE_JSON
	export POD_IP
	(cd "$POD_DIRECTORY" &&
	jq -nre "$DEFAULTS_JSON | if (.pods.$POD_NAME_JSON | has(\"$SCRIPT_TYPE\")) then .pods.$POD_NAME_JSON.\"$SCRIPT_TYPE\" else if (.\"$SCRIPT_TYPE\") then .\"$SCRIPT_TYPE\" else [\"/bin/true\"] end end | (. + $ARGS_JSON + [\"#\"]) | join(\"\\u0000\")" |
	head -z -n -1 | xargs -0 sh || (echo "Error in $SCRIPT_TYPE script" >&2; false)) || return 1
}

podip() {
	for SEC in 1 1 3 5; do
		POD_STATUS="$(rkt status "$POD_UUID")" || return 1
		if echo "$POD_STATUS" | grep -Eq '^state=running'; then
			# Print IP
			echo "$POD_STATUS" | grep -Eo '^networks=[^:]+:[^=]+=[0-9a-z\.:]+' | grep -Eo '[0-9a-z\.:]+$' \
				|| (echo "Cannot find IP for pod $POD_NAME" >&2; false) || return 1
			return 0
		elif echo "$POD_STATUS" | grep -Eq '^state=exited'; then
			echo 'Pod exited' >&2
			return 1
		fi
		sleep $SEC
	done
	echo "Timed out while waiting for pod $POD_NAME" >&2
	return 1
}

reload() {
	trap : 1
	kill -1 "$POD_PID"
	trap reload 1
}

terminateGracefully() {
	trap : 2 3 9 15
	kill -15 $CHECK_PIDS 2>/dev/null
	runInfrastructureScript on-terminate
	kill -15 "$POD_PID" 2>/dev/null
	for SEC in 1 1 3 3 5 10; do
		ps "$POD_PID" >/dev/null || exit "${1:-0}"
		sleep $SEC
	done
	echo "Killing pod since it did not respond: $POD_NAME" >&2
	kill -9 "$POD_PID"
	exit 1
}


DEFAULTS_FILE=
POD_FILE=
POD_NAME=
VERBOSE=
while [ $# -gt 0 ]; do
	case "$1" in
		-c)
			shift
			DEFAULTS_FILE="$1"
			[ "$1" ] || usage
		;;
		-v)
			VERBOSE=true
		;;
		*)
			break;
		;;
	esac
	shift
done
POD_FILE="$1"
POD_NAME="$2"
shift
shift
[ ! -z "$POD_FILE" -a ! -z "$POD_NAME" -a $# -eq 0 ] || usage

POD_NAME_JSON="$(echo "$POD_NAME" | jq -R .)" &&
DEFAULTS_JSON="$([ ! -f "$DEFAULTS_FILE" ] || cat "$DEFAULTS_FILE")" &&
DEFAULTS_JSON="${DEFAULTS_JSON:-\{\}}" &&
POD_DIRECTORY="$(readlink -m "$(dirname "$POD_FILE")")" &&
POD_UUID_FILE="/var/run/pod-${POD_NAME}.uuid" && # todo
POD_JSON="$(cat "$POD_FILE")" &&
POD_USER="$(stat -c '%U' "$POD_FILE")" &&
POD_GROUP="$(stat -c '%U' "$POD_FILE")" &&
validatePodJSON "$POD_JSON" &&
buildDockerImages "$POD_JSON" "$POD_DIRECTORY" &&
EFFECTIVE_JSON="$(generateEffectiveJSON "$POD_JSON" "$DEFAULTS_JSON")" &&
POD_JSON="$(jq -n "$EFFECTIVE_JSON | .effective")" &&
RKT_RUN_ARGS="$(generateRktRunArgs)" || exit 1

if [ "$VERBOSE" ]; then
	echo 'Effective configuration:'
	jq -n "$EFFECTIVE_JSON | .effective"
	printf 'Will now run rkt commands:\n%s\n' '  rkt prepare --quiet=true'
	generateRktPrepareArgs | xargs -0 -n1 | sed -E 's/^/    /g'
	echo "  rkt run-prepared $RKT_RUN_ARGS CONTAINER_UUID"
fi

POD_IP=
runInfrastructureScript on-prepared || exit 1

echo "$EFFECTIVE_JSON" | jq -r '[(.effective.volumes[]? | select(.kind == "host" and .readonly == false) | .source), ""] | join("\u0000")' | head -z -n -1 | xargs -0 -n1 mkdir -p 2>/dev/null
POD_UUID="$(generateRktPrepareArgs | xargs -0 rkt prepare --quiet=true)" &&
([ ! -f "$POD_UUID_FILE" ] || /usr/bin/rkt rm --uuid-file="$POD_UUID_FILE" >/dev/null 2>/dev/null || true) && # Clean up old container
echo "$POD_UUID" > "$POD_UUID_FILE" || exit 1
rkt run-prepared $RKT_RUN_ARGS "$POD_UUID" &
POD_PID=$!
trap terminateGracefully 2 3 9 15
trap reload 1
POD_IP="$(podip)" &&
runInfrastructureScript on-started &&
sleep 1 &&
initHealthChecks || terminateGracefully 1
unset EFFECTIVE_JSON
unset POD_JSON
wait
terminateGracefully
