#!/bin/sh

usage() {
	echo "Usage: $0 {await-consul CONSULHOST}|{register CONSULHOST CONFDIR}|{update CONSULHOST CHECKID CHECKSTATUS CHECKOUTPUT}" >&2
	exit 1
}

waitForConsul() {
	for SEC in 1 1 1 1 1 1 1 1 1 1; do
		curl -XGET "http://$1:8500/v1/kv/?keys" >/dev/null 2>/dev/null && return 0
		sleep 1
	done
	echo "consul ($1) unavailable" >&2
	return 1
}

registerConsulService() {
	deregisterConsulService "$CONSUL_HOST" "$POD_NAME" &&
	CONSUL_SERVICE_JSON="$(echo "$EFFECTIVE_JSON" | jq -c \
		--arg pod_name "$POD_NAME" \
		--arg pod_ip "$POD_IP" \
		'{
				"name": $pod_name,
				"tags": [.pod.services | to_entries[]?.key],
				"address": $pod_ip,
				"enableTagOverride": false,
				"checks": [[.pod.services | to_entries[] | select(.value.healthcheck != null) | .key] | sort | .[] | {
					"notes": (. + " app check"),
					"ttl": "30s"
				}]
		}')" &&
	curl -XPUT "http://$CONSUL_HOST:8500/v1/agent/service/register" -d "$CONSUL_SERVICE_JSON" -m 3
}

# Args: CONSULHOST PODNAME
deregisterConsulService() {
	curl "http://$1:8500/v1/agent/service/deregister/$2"
}

# Args: APPNAME STATUS STATUSTEXT
updateConsulServiceCheck() {
	OUTPUT_JSON="$(echo "$3" | jq -sR .)"
	CHECKID="$(echo "$EFFECTIVE_JSON" | jq -re --arg pod_name "$POD_NAME" --arg app_name "$1" \
		'[.pod.services? | to_entries? | .[] | select(.value.healthcheck != null)] |
		if (length == 1)
			then ("service:" + $pod_name)
			else ("service:" + $pod_name + ":" + ([.[].key] | sort | (bsearch($app_name) + 1) | tostring))
			end')" &&
	curl -XPUT "http://$CONSUL_HOST:8500/v1/agent/check/update/$CHECKID" -d "{\"status\":\"$2\",\"output\":$OUTPUT_JSON}" -m 3
}

registerHttpHostConsulKvEntries() {
	# TODO: use consul txn for batch insert
	SERVICE_HOST_LENGTH="$(expr length "${POD_NAME}:")" &&
	HTTP_HOST_JQ="$(httpHostEntriesJq)" &&
	HTTP_HOSTS_JSON="$(jq -nc "$HTTP_HOST_JQ")" || return 1
	[ "$HTTP_HOSTS_JSON" ] && echo "$HTTP_HOSTS_JSON" | while read HTTP_HOST_JSON; do
		HTTP_HOST="$(jq -nr "$HTTP_HOST_JSON | .httpHost")" &&
		SERVICE_PORT="$(jq -nr "$HTTP_HOST_JSON | .port | select(. != null)")" &&
		SERVICE_ADDRESS="$POD_NAME:$SERVICE_PORT" &&
		([ "$SERVICE_PORT" ] || (echo "Service HTTP_PORT undefined for HTTP_HOST: $HTTP_HOST" >&2; false)) &&
		REGISTERED_SERVICE_ADDRESS="$(curl -XGET "http://$CONSUL_HOST:8500/v1/kv/http/$HTTP_HOST?raw" -m 3 2>/dev/null || true)" &&
		# Disallow HTTP host override
		([ ! "$REGISTERED_SERVICE_ADDRESS" ] || [ "$(echo "$REGISTERED_SERVICE_ADDRESS" | grep -Eo "^.{$SERVICE_HOST_LENGTH}")" = "${POD_NAME}:" ] \
			|| (echo "HTTP_HOST $HTTP_HOST is already registered for $REGISTERED_SERVICE_ADDRESS!" >&2; false)) || return 1
		# Register pod as HTTP host
		if [ ! "$REGISTERED_SERVICE_ADDRESS" = "${SERVICE_ADDRESS}" ]; then
			echo "Registering proxy host $HTTP_HOST -> $SERVICE_ADDRESS"
			[ "$(curl -XPUT "http://$CONSUL_HOST:8500/v1/kv/http/$HTTP_HOST" -m 3 -d "$SERVICE_ADDRESS" 2>/dev/null)" = true ] \
				|| (echo "Failed to register HTTP_HOST in consul: $HTTP_HOST=$SERVICE_ADDRESS" >&2; false) || return 1
		fi
	done
	true
}

httpHostEntriesJq() {
	cat <<-EOF
		$EFFECTIVE_JSON | .images as \$i | .effective?.services? | to_entries? | .[] as \$s | \$s.value.environment? | select(.HTTP_HOST != null) | {
			"httpHost": .HTTP_HOST,
			"port": (if (.HTTP_PORT) then .HTTP_PORT else (\$i[\$s.value.image]?.app?.ports as \$p | if ((\$p | length) == 1) then \$p[0].port else null end) end)
		}
	EOF
}

fireConsulReloadConfigEvent() {
	curl -XPUT "http://$CONSUL_HOST:8500/v1/event/fire/reload-config" -m 3 -d '' >/dev/null 2>/dev/null \
		|| (echo "Failed to fire consul reload-config event!" >&2; false)
}

CONSUL_HOST="$2"
[ "$2" ] || usage
[ "$POD_NAME" ] || (echo "Missing env var: POD_NAME" >&2; false) || exit 1

case "$1" in
	await-consul)
		waitForConsul "$2"
	;;
	register)
		[ "$EFFECTIVE_JSON" ] || (echo "Missing env var: EFFECTIVE_JSON" >&2; false) || exit 1
		[ "$POD_IP" ] || (echo "Missing env var: POD_IP" >&2; false) || exit 1

		DEST_FILE="$3/pod-${POD_NAME}.json"
		registerConsulService &&
		registerHttpHostConsulKvEntries
	;;
	deregister)
		deregisterConsulService "$CONSUL_HOST" "$POD_NAME" || exit 1
	;;
	update)
		APPNAME="$3"
		APPSTATUS="$4"
		APPSTATUSTXT="$5"
		updateConsulServiceCheck "$APPNAME" "$APPSTATUS" "$APPSTATUSTXT"
	;;
	*)
		usage
esac

# TODO: dig @172.16.28.1 consul.service.dc1.consul | grep -E '^[^;]+' | head -1 | grep -Eo '[0-9a-z\.:]+$'

