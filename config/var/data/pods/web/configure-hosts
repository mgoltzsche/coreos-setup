#!/bin/sh
#
# Generates nginx virtual host configuration based on consul's KV keys
# beginning with http/.
# Optionally starts a server that generates configuration invoked by incoming
# TCP connections.
# (The virtual host configuration cannot be provided by the client to
# prevent unauthorized configuration and avoid a more complex security concept)

[ $# -eq 0 ] || [ $# -eq 3 -a "$1" = server ] || (echo "Usage: $0 [server LISTENIP LISTENPORT]" >&2; false) || exit 1

LISTENHOST="$2"
LISTENPORT="$3"

waitForConsulAgent() {
	for SEC in 1 1 3 3 5 10; do
		wget -qO - "http://consul:8500/v1/kv/?keys" >/dev/null 2>/dev/null && return 0
		sleep $SEC
	done
	echo "consul unavailable" >&2
	exit 1
}

waitForNginx() {
	for SEC in 1 1 3 5; do
		[ -f /var/run/nginx.pid ] && ps -o pid | grep -wq "$(cat /var/run/nginx.pid)" && return 0
		sleep $SEC
	done
	echo "nginx unavailable" >&2
	exit 1
}

configureNginxVirtualHosts() {
	waitForConsulAgent &&
	find /etc/nginx/conf.d/ -name 'host-*.conf' -type f -exec rm {} \; && # Delete existing host configuration
	HTTP_KEYS="$(wget -qO - "http://consul:8500/v1/kv/http/?keys" 2>/dev/null || true)" &&
	HTTP_HOSTS="$(echo "$HTTP_KEYS" | grep -Eo '"http/[a-z0-9_\-\.]+"' | sed -E -e 's/^"http\///' -e 's/"$//' | sort | uniq)" &&
	CONSUL_IP="$(wget -qO - http://consul:8500/v1/catalog/service/consul 2>/dev/null | grep -Eo '"Address":"[^"]+"' | cut -d '"' -f 4)" || return 1
	[ -z "$HTTP_HOSTS" ] || echo "$HTTP_HOSTS" | while read HTTP_HOST; do
		CONF_FILE="/etc/nginx/conf.d/host-$HTTP_HOST.conf"
		SERVICE_ADDRESS="$(wget -qO - "http://consul:8500/v1/kv/http/$HTTP_HOST?raw")" \
			|| (echo "Service address value for HTTP host '$HTTP_HOST' could not be resolved" >&2; false) || return 1
		([ "$SERVICE_ADDRESS" ] || (echo "Empty service address for HTTP host '$HTTP_HOST'" >&2; false)) &&
		SERVICE_ADDRESS="$(echo "$SERVICE_ADDRESS" | sed -E 's/([^:]+)(:[0-9]+)/\1.service.dc1.consul\2/')"
		# TODO: move service.dc1.consul into parameter
		cat > "$CONF_FILE" <<-EOF
			server {
			  listen 80;
			  #listen 443 ssl;
			  server_name $HTTP_HOST;
			  access_log  stdout  main;
			  error_log  stderr  info;
			  root /usr/share/nginx/html;

			  #ssl_certificate     /etc/ssl/certs/repository.algorythm.de.crt;
			  #ssl_certificate_key /etc/ssl/private/repository.algorythm.de.key;

			  include proxy_params.conf;

			  location / {
			    resolver $CONSUL_IP valid=10s;
			    # Variable required to let nginx not resolve hostname at boot time
			    set \$service http://$SERVICE_ADDRESS;
			    proxy_pass \$service;
			  }

			  error_page   500 503 504  /50x.html;
			  error_page   502          /502.html;
			  location = /50x.html {
			    root   /usr/share/nginx/html;
			  }
			  location = /502.html {
			    root   /usr/share/nginx/html;
			  }
			}
		EOF
		[ $? -eq 0 ] &&
		NGINX_CONF_TEST="$(nginx -t 2>&1)" \
			|| (echo "$NGINX_CONF_TEST" >&2; echo "Removing invalid configuration file $CONF_FILE" >&2; rm "$CONF_FILE"; false) || return 1
		echo "Configured virtual host: $HTTP_HOST -> $SERVICE_ADDRESS" >&2
	done
	# Generate static HTML pages
	HOST_LIST_ENTRIES="$(echo "$HTTP_HOSTS" | sed -E 's/^.*$/<li><a href="https:\/\/\0">\0<\/a><\/li>/')"
	cat > /usr/share/nginx/html/index.html <<-EOF
		<!DOCTYPE html>
		<html>
		<head>
		<title>Site not found!</title>
		<style>
			body {
				width: 35em;
				margin: 0 auto;
				font-family: Tahoma, Verdana, Arial, sans-serif;
			}
		</style>
		</head>
		<body>
			<h1>Welcome!</h1>
			<p>Sorry, the site you are looking for does not exist.</p>
			<h2>Available sites</h2>
			<ul>
				$HOST_LIST_ENTRIES
			</ul>
		</body>
		</html>
	EOF
	cat > /usr/share/nginx/html/502.html <<-EOF
		<!DOCTYPE html>
		<html>
		<head>
		<title>Service unavailable</title>
		<style>
			body {
				width: 35em;
				margin: 0 auto;
				font-family: Tahoma, Verdana, Arial, sans-serif;
			}
		</style>
		</head>
		<body>
			<h1>Service unavailable</h1>
			<p>Sorry, this site is down for maintenance.</p>
			<h2>Available sites</h2>
			<ul>
				$HOST_LIST_ENTRIES
			</ul>
		</body>
		</html>
	EOF
}

if [ "$1" = server ]; then
	configureNginxVirtualHosts || exit 1
	nc -lk -s "$LISTENHOST" -p "$LISTENPORT" -e "$0" &
else
	waitForNginx &&
	configureNginxVirtualHosts &&
	nginx -s reload
fi
